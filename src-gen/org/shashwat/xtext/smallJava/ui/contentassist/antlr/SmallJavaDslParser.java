/*
 * generated by Xtext
 */
package org.shashwat.xtext.smallJava.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.shashwat.xtext.smallJava.services.SmallJavaDslGrammarAccess;

public class SmallJavaDslParser extends AbstractContentAssistParser {
	
	@Inject
	private SmallJavaDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.shashwat.xtext.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser createParser() {
		org.shashwat.xtext.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser result = new org.shashwat.xtext.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDatatypeAccess().getAlternatives(), "rule__Datatype__Alternatives");
					put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
					put(grammarAccess.getVisibilityTypesAccess().getAlternatives(), "rule__VisibilityTypes__Alternatives");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardsAccess().getGroup(), "rule__QualifiedNameWithWildCards__Group__0");
					put(grammarAccess.getSmallJavaAccess().getGroup(), "rule__SmallJava__Group__0");
					put(grammarAccess.getSmallJavaAccess().getGroup_4(), "rule__SmallJava__Group_4__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getDatatypeAccess().getGroup_0(), "rule__Datatype__Group_0__0");
					put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
					put(grammarAccess.getNamespaceAccess().getImportsAssignment_2(), "rule__Namespace__ImportsAssignment_2");
					put(grammarAccess.getNamespaceAccess().getSmallJavaAssignment_3(), "rule__Namespace__SmallJavaAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSmallJavaAccess().getVisibilityAssignment_0(), "rule__SmallJava__VisibilityAssignment_0");
					put(grammarAccess.getSmallJavaAccess().getFinalAssignment_1(), "rule__SmallJava__FinalAssignment_1");
					put(grammarAccess.getSmallJavaAccess().getNameAssignment_3(), "rule__SmallJava__NameAssignment_3");
					put(grammarAccess.getSmallJavaAccess().getParentAssignment_4_1(), "rule__SmallJava__ParentAssignment_4_1");
					put(grammarAccess.getSmallJavaAccess().getAttributeAssignment_6(), "rule__SmallJava__AttributeAssignment_6");
					put(grammarAccess.getAttributeAccess().getDatatypeAssignment_0(), "rule__Attribute__DatatypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getArrayAssignment_1(), "rule__Attribute__ArrayAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getSmallJavaTypeAccess().getTypeAssignment(), "rule__SmallJavaType__TypeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.shashwat.xtext.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser typedParser = (org.shashwat.xtext.smallJava.ui.contentassist.antlr.internal.InternalSmallJavaDslParser) parser;
			typedParser.entryRuleNamespace();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SmallJavaDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SmallJavaDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
